---------------------------------------------------------------------------
|                       FEATURE ROADMAP / TODO LIST                       |
---------------------------------------------------------------------------

ENGINE (Dogwood)
    * Game object/component system
        * Proper awake/start/enable/disable/destroy/etc.
        * Fix custom component bindings
    * Resources
        * Unloading
        * Fix Shader type
        * Materials?
    
    * Text (2D)
    * Particles
    * Shadows
    * Physics
    * Animation
    * Audio
    * Networking
    * Memory allocators
    * Prefabs

    * Shading
        * Multiple light sources?
    * Transform math helpers

    * Debugging
        * Debug logging (with streams)
        * Tweakables?

    * Fix-up stuff
        * Memory leaks everywhere! Lots of missing "deletes"
        * Colour -> Color everywhere for consistency
        * Rewrite matrix inversion. Currently just copied from CS488 provided code
        * Add missing matrix maths (e.g. addition)
        * Engine provided assets (e.g. default shaders, primitive meshes)
        * Input wrappers
        

---------------------------------------------------------------------------

EDITOR (Thicket)

    * Project
        * New project, open project
        * Indicate active project in editor window
        * Project settings window
        * Assets widget
        * Add/remove assets (with guids)
        * typedef guid type?

    * Scene
        * New scene

    * Game components
        * Built-in component widgets (mesh, material, texture, shader)
        * Custom component widget
        * Add/remove components
        * Enable/disable components

    * Visuals
        * Show world space gnomon
        * Change transform tool shape based on mode
        * Use cones instead of pyramids for gnomon arrows

    * Object manipulation
        * Local vs. Global option
    
    * Window resizing

    * "Prefabs"?

    BUGS:
        - Something wrong with redo stack (can't always redo all the way)
        - Items don't auto expand when reparented
        - Camera "up" is wrong / LookAt bug
        - Root is not handled properly
        - Clear window state on scene load
        - Keep constant gnomon size
        - Some scaling (non-uniform?) breaks object picking
        - Rotation tool behaviour is non-intuitive
        - Scene view resolution isn't set nicely
        - Transform widget values don't update when object is moved with transform tool

---------------------------------------------------------------------------

GAME (Katamari?)


---------------------------------------------------------------------------

SCENE/EDITOR REQUIREMENTS

    - Create game objects
    - Name game objects
    - Reparent game objects
    - Position, rotate, and scale game objects
    - Enable/disable game objects
    - Delete game objects
    - Add built-in components to game objects
	    - Mesh, Material, Texture
    - Set the values of built in components to game objects
	    - Mesh, Material, Texture
    - Add user defined (C++) components to game objects
    - Set the values of user defined (C++) components of game objects
    - Instance/duplicate game objects

    - Position the camera
    - Position the light source(s), set parameters


RUN-TIME GAME OBJECT REQUIREMENTS

    - Create/spawn game objects
    - Trigger Awake/Start/etc. functions
    - Name game objects
    - Reparent game objects
    - Position, rotate, and scale game objects
    - Enable/disable game objects
    - Destroy game objects
    - Add/remove components

---------------------------------------------------------------------------

DESIGN DECISIONS

    Scene files
     - Format: XML
        - Mergeable/diffable
        - Human readable
        - Human writeable (before tool is ready)

    Editor
    - Start early! Build in lockstep with Engine features
    - Put Engine code in separate project that builds static lib
        - Linked to Game exe and Editor exe

    Windowing/UI Library
    - QT for Editor but GLFW for game
        - QT needed for UI for Editor, but can't control game loop as easily, slower
        - Can build game without Qt dependency

    Undo/redo 
    - Added undo stack right after first editor commands were implemented (create and delete)
    - Would be extremely painful to add in later after lots of commands were implemented