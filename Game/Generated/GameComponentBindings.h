// !!!!! This file should be autogenerated by a tool. For now it is maintained by hand.

#pragma once

#include <string>

#include "GameComponentFactory.h"

// TODO this block of includes would be auto generated based on project file
#include "Bouncer.h"
#include "FooComponent.h"
#include "SpinningComponent.h"

using std::string;

class GameComponent;

// TODO unsure yet if this design is terrible or not
// How to avoid regenerating entire file every time a single component changes? Ugh.

class MyFactory : public GameComponentFactory
{
    GameComponent* CreateComponent(unsigned int guid)
    {
        // TODO this should be a hash map not a giant switch statement
        switch (guid)
        {
        case 3075022151: return new SpinningComponent();
        case 1515607268: return new FooComponent();
        case 3988628104: return new Bouncer();
        }
        return NULL;
    }
};



/*
void SetParameter_GUID_4001(SpinningComponent* comp, XMLElement* param)
{
    if (param == NULL)
        return;

    // TODO generate numeric codes for each parameter, to avoid string compare?
    const char* name = param->Attribute("name");
    if (strcmp(name, "Speed") == 0)
    {
        comp->Speed = param->FloatAttribute("value");
    }
    else if (strcmp(name, "Label") == 0)
    {
        comp->Label = param->Attribute("value");
    }
    else if (strcmp(name, "EnableSpinning") == 0)
    {
        comp->EnableSpinning = param->BoolAttribute("value");
    }
}

void SetParameter_GUID_4002(FooComponent* comp, XMLElement* param)
{
    if (param == NULL)
        return;

    // TODO generate numeric codes for each parameter, to avoid string compare?
    const char* name = param->Attribute("name");
    if (strcmp(name, "BarParam") == 0)
    {
        comp->BarParam = param->FloatAttribute("value");
    }
    else if (strcmp(name, "BazParam") == 0)
    {
        comp->BazParam = param->BoolAttribute("value");
    }
}

void SetComponentParameter(unsigned int guid, GameComponent* comp, XMLElement* param)
{
    // TODO make this a hash map of function pointers instead of a giant switch statement?

    switch (guid)
    {
        case 4001:  // SpinningComponent
        {
            SetParameter_GUID_4001((SpinningComponent*)comp, param);
            break;
        }
        case 4002:  // FooComponent
        {
            SetParameter_GUID_4002((FooComponent*)comp, param);
            break;
        }
        default:
        {
            printf("Error: missing guid in generated bindings file: %d\n", guid);
            break;
        }
    }
}
*/